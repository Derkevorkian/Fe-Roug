import networkx as nx
import heapq
import random
import matplotlib.pyplot as plt
import matplotlib.animation as animation

def temps_attente(cycle, t):
    """Calcule le temps d'attente au feu selon l'heure t et son cycle (vert, rouge)."""
    vert, rouge = cycle
    periode = vert + rouge
    t_mod = t % periode
    if t_mod < vert:
        return 0  # vert
    else:
        return periode - t_mod  # attente jusqu'au prochain vert

def creer_ville(nb_noeuds, proba_route=0.3):
    """Crée une ville simple avec des routes et des feux rouges."""
    G = nx.DiGraph()
    cycles = {}
    for i in range(nb_noeuds):
        # chaque noeud a un cycle aléatoire vert/rouge
        cycles[i] = (random.randint(5, 15), random.randint(10, 30))
        G.add_node(i)

    # ajouter des routes aléatoires
    for u in range(nb_noeuds):
        for v in range(nb_noeuds):
            if u != v and random.random() < proba_route:
                G.add_edge(u, v, weight=random.randint(1, 10))
    return G, cycles




def dupliquer_graphe(adj, n):
    """
    Duplique un graphe n fois à partir d'une matrice d'adjacence (listes).
    Aucune arête entre les copies.
    """
    m = len(adj)                     # taille d'une copie
    N = m * n                        # taille totale
    A = [[0 for k in range(N)] for l in range(N)]  # matrice vide NxN

    for k in range(n):
        i0 = k * m
        for i in range(m):
            for j in range(m):
                A[i0 + i][i0 + j] = adj[i][j]

    return A



#affichage
def afficher_graphe_matrice(adj):
    """
    Affiche un graphe à partir d'une matrice d'adjacence.
    - adj : liste de listes ou np.array, matrice carrée (n x n)
    """
    n = len(adj)
    G = nx.Graph()

    # Ajout des noeuds
    G.add_nodes_from(range(n))

    # Ajout des arêtes à partir de la matrice
    for i in range(n):
        for j in range(i+1, n):  # éviter les doublons dans un graphe non orienté
            if adj[i][j] != 0:
                G.add_edge(i, j, weight=adj[i][j])

    # Positionnement automatique
    pos = nx.spring_layout(G, seed=42)

    # Affichage
    plt.figure(figsize=(6, 6))
    nx.draw(G, pos, with_labels=True, node_color="skyblue", node_size=800, edgecolors="black", font_weight="bold")
    nx.draw_networkx_edge_labels(G, pos, edge_labels=nx.get_edge_attributes(G, "weight"))
    plt.title("Graphe à partir d'une matrice d'adjacence")
    plt.axis("off")
    plt.show()



adj = [
    [0, 1, 0],
    [1, 0, 1],
    [0, 1, 0]
]

M = dupliquer_graphe(adj, 3)
afficher_graphe_matrice(M)
